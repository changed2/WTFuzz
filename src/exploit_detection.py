import signal
    
def crash_log(returncode, error, payload, output, filename):
    result = {
        'crash_type': None,
        'vulnerability_type': None,
        'details': []
    }
    
    signal_number = -returncode if returncode < 0 else returncode
    
    if signal_number == signal.SIGSEGV:
        result['crash_type'] = 'Segmentation Fault (SIGSEGV)'
        result['details'].append('Memory access violation')
        signal.SI
    elif signal_number == signal.SIGABRT:
        result['crash_type'] = 'Program Abort (SIGABRT)'
        result['details'].append('Program terminated abnormally')
        
    elif signal_number == signal.SIGILL:
        result['crash_type'] = 'Illegal Instruction (SIGILL)'
        result['details'].append('Execution of invalid instruction')
    
    error_output = error.lower()
    
    # Stack buffer overflow patterns
    if 'stack smashing detected' in error_output:
        result['vulnerability_type'] = 'Buffer Overflow (with Stack Canary)'
        result['details'].append('Buffer protection mechanism triggered')

    elif (signal_number == signal.SIGSEGV and 
          any(pattern in error_output for pattern in [
              'segmentation fault',
              'invalid memory reference',
              'memory access violation'
          ])):
        result['vulnerability_type'] = 'Buffer Overflow (no Stack Canary)'
        result['details'].append('Memory access violation - possible return address corruption')
    
    
    # Format string vulnerability patterns
    format_string_indicators = [
        '0x',                    # Memory addresses
        '(nil)',                 # Null pointers printed by %p
        'stack trace'           # Often printed when %s accesses invalid address
    ]
    if (signal_number == signal.SIGSEGV and 
       any(indicator in output for indicator in format_string_indicators)):
        result['vulnerability_type'] = 'Format String Vulnerability'
        result['details'].append('Crash with format string in input')

    summary = '=' * 30 + ' PROGRAM CRASH DETECTED ' + '=' * 30 + '\n'
    
    if result['crash_type']:
        summary += f"Crash Type: {result['crash_type']}\n"
    
    if result['vulnerability_type']:
        summary += f"Detected Vulnerability: {result['vulnerability_type']}\n"
    
    if result['details']:
        summary += "\nCrash Details:\n"
        for detail in result['details']:
            summary += f"- {detail}\n"
    
    summary += f"\nPayload size: {len(payload)} bytes\n"
    summary += f'Fuzzing terminated, writing payload to bad_{filename}.txt'
    print(summary)
    with open(f"../fuzzer_output/bad_{filename}.txt", "w+") as f:
        f.write(payload)
    
    return