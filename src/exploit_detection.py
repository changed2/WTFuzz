import signal
import os

def generate_crash_summary(result):
    summary = '=' * 30 + ' PROGRAM CRASH DETECTED ' + '=' * 30 + '\n'
    
    if result['crash_type']:
        summary += f"Crash Type: {result['crash_type']}\n"
    
    if result['vulnerability_type']:
        summary += f"Vulnerability: {result['vulnerability_type']}\n"
    
    if result['details']:
        summary += "\nDetails:\n"
        for detail in result['details']:
            summary += f"- {detail}\n"
    
    summary += f"\nPayload size: {result['payload_size']} bytes\n"
    summary += 'Fuzzing terminated, writing payload to <textfile>'
    
    return summary

def crash_log(returncode, error, payload):
    summary = ''
    summary += '=' * 30 + ' PROGRAM CRASH DETECTED ' + '=' * 30 + '\n'
    signal_number = -returncode

    if signal_number == signal.SIGSEGV:
        summary += 'The program crashed with a segmentation fault\n'
        summary += 'Buffer overflow detected\n'
    elif signal_number == signal.SIGABRT:
        summary += 'The program terminated by aborting\n'
    else:
        summary += 'Other error'
    
    # Inspect the error message to figure out the type of vulnerability.
    if ('stack smashing' in error):
        summary += 'Buffer overflow with stack canary detected\n'
    
    summary += 'Fuzzing terminated, writing payload to <textfile>'

    print(summary)